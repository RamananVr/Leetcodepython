"""
LeetCode Question #38: Count and Say

Problem Statement:
The "Count and Say" sequence is a sequence of digit strings defined by the recursive formula:

- countAndSay(1) = "1"
- countAndSay(n) is the string representation of the next term in the sequence, which is generated by describing the previous term.

To generate the next term in the sequence, count the number of consecutive digits in the current term and write that count followed by the digit.

For example:
1. countAndSay(1) = "1"
2. countAndSay(2) = "11" (one 1)
3. countAndSay(3) = "21" (two 1s)
4. countAndSay(4) = "1211" (one 2, then one 1)
5. countAndSay(5) = "111221" (one 1, one 2, then two 1s)

Given a positive integer n, return the nth term of the "Count and Say" sequence.

Constraints:
- 1 <= n <= 30
"""

def countAndSay(n: int) -> str:
    """
    Generate the nth term of the "Count and Say" sequence.
    """
    if n == 1:
        return "1"
    
    # Start with the first term
    current = "1"
    
    for _ in range(2, n + 1):
        next_term = []
        count = 1
        
        # Iterate through the current term to generate the next term
        for i in range(1, len(current)):
            if current[i] == current[i - 1]:
                count += 1
            else:
                next_term.append(str(count))
                next_term.append(current[i - 1])
                count = 1
        
        # Append the last group
        next_term.append(str(count))
        next_term.append(current[-1])
        
        # Update the current term
        current = ''.join(next_term)
    
    return current

# Example Test Cases
if __name__ == "__main__":
    print(countAndSay(1))  # Output: "1"
    print(countAndSay(2))  # Output: "11"
    print(countAndSay(3))  # Output: "21"
    print(countAndSay(4))  # Output: "1211"
    print(countAndSay(5))  # Output: "111221"
    print(countAndSay(6))  # Output: "312211"

"""
Time and Space Complexity Analysis:

Time Complexity:
- The time complexity is O(m * n), where n is the input number and m is the average length of the terms in the sequence.
- Each term in the sequence roughly doubles in size, so the length of the nth term is proportional to 2^(n-1).
- However, since n is constrained to a maximum of 30, this is effectively constant for practical purposes.

Space Complexity:
- The space complexity is O(m), where m is the length of the current term being processed.
- This is because we store the current term and the next term during the computation.

Topic: String Manipulation
"""