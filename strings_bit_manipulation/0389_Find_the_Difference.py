"""
LeetCode Problem #389: Find the Difference

Problem Statement:
You are given two strings s and t. The string t is generated by randomly shuffling the string s 
and then adding one more letter at a random position. Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:
Input: s = "", t = "y"
Output: "y"
Explanation: 'y' is the letter that was added.

Constraints:
- 0 <= s.length <= 1000
- t.length == s.length + 1
- s and t consist of lowercase English letters.
"""

# Solution
def findTheDifference(s: str, t: str) -> str:
    """
    Finds the extra character added to string t.

    Args:
    s (str): Original string.
    t (str): Modified string with one extra character.

    Returns:
    str: The extra character added to t.
    """
    # Use XOR to find the difference
    result = 0
    for char in s:
        result ^= ord(char)
    for char in t:
        result ^= ord(char)
    return chr(result)

# Example Test Cases
if __name__ == "__main__":
    # Test Case 1
    s1 = "abcd"
    t1 = "abcde"
    print(findTheDifference(s1, t1))  # Output: "e"

    # Test Case 2
    s2 = ""
    t2 = "y"
    print(findTheDifference(s2, t2))  # Output: "y"

    # Test Case 3
    s3 = "a"
    t3 = "aa"
    print(findTheDifference(s3, t3))  # Output: "a"

    # Test Case 4
    s4 = "aeiou"
    t4 = "uaeio"
    print(findTheDifference(s4, t4))  # Output: "u"

# Time and Space Complexity Analysis
"""
Time Complexity:
- The solution iterates through both strings s and t once.
- Let n = len(s) and m = len(t). Since m = n + 1, the total number of iterations is O(n + m) = O(n).
- Therefore, the time complexity is O(n).

Space Complexity:
- The solution uses a constant amount of extra space (an integer variable `result`).
- Therefore, the space complexity is O(1).
"""

# Topic: Strings, Bit Manipulation